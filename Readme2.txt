１．各ファイルの概略

qs15.c       : qs12 の改良版。
qs16.c       : qs15 と mps (http://ww51.tiki.ne.jp/~srr-cake/qsort/mps.txt) の混成版。
mm88k.c      : 要素のスワップ/移動関数。8バイト整数対応。繰り返しの展開(8回分)を実施。
qsnewlib.c   : newlibライブラリのqsortを比較実験用に改造したもの。
qs_glibc.c   : glibcライブラリのqsortを比較実験用に改造したもの。（実はマージソート）
main_prog.c  : 比較回数・代入回数・処理時間などを計測して表示するプログラム。
benchmark.sh : ベンチマークテストを行うシェルスクリプト。
　　　　　　　 コンパイルオプション -DDEBUG を指定すれば、要素の移動回数を測定できる。



２．qs6 qs7 qs9 qs10 qs12 qs13 qs15 qs16 の概要

qsortにもいろいろな方式がある。
配列を２つに分割するキー値を持つ要素を分割要素と呼ぶ。
以下の例では、先頭の(5)が分割要素に選ばれたものとする。
各qsortは矢印(→)左の配列を矢印右のようにする。「|」は分割した位置を示している。


２．１．処理の概要

従来型  565238 → 532|568   2番目の(5)が右に移動している。「(5)不移動」の実装は異常事態を招く。（※１）
ｑｓ６  565238 → 5352|68   従来型は2つの(5)が左右に別れるが、qs6では必ず片方に集める。次に 235|5|68 とする。
ｑｓ７  565238 → 55|32|68  すべての(5)を一旦左右に集める。普通は左右両端に(5)がくる。 次に 32|55|68 とする。
ｑｓ９  565238 → 23|55|68  分割要素と同じキー値を持つ要素を中央に集める。移動できなくなった後に工夫あり。
ｑｓ10  ｑｓ９＋間接ソートを実行。（間接ソート：「元配列の各要素へのポインタ」の配列を別途に作り、
　　　　　　　　　　　　　　　　　　そのインデックス配列をソートする。その後、元配列を正しく並べ替える。）
ｑｓ12  qs10ではキー値の種類が２～４種類（男女キーなど）のとき、少し遅くなっていた。それを改良した。
ｑｓ13  qs12にmps(Multi Partition Sort)http://ww51.tiki.ne.jp/~srr-cake/qsort/mps.c を組み合わせた。
ｑｓ15  qs12の改良版。mm88を書き換えてバイナリコードでのサイズを半分にした。
ｑｓ16  qs15にmps(Multi Partition Sort)http://ww51.tiki.ne.jp/~srr-cake/qsort/mps.c を組み合わせた。



２．２．各qsortの特徴

従来型  少し遅い。異常事態を起こす間違った実装が過去にいくつもあった。（※１）
ｑｓ６  要素の比較回数が多く、移動回数が少ない。平均するとｑｓ７と同じか少し速い。
ｑｓ７  要素の比較回数が少なく、移動回数が多い。キーが２値(男女など)の場合、要素の移動回数が激増する。
  qsortでは、要素数・要素サイズ・比較関数の重さ・キー値の分布ごとに、最適なqsortは異なる。
  要素数・要素サイズは、ソートの開始時点で確定するのでアルゴリズムで対応可能である。
  しかし、比較関数の重さ・キー値の分布は、不明なままソートを実行することになる。
  以下のソートではソート対象の性質が分かっていれば、qsort()を呼び出す前に下記のパラメータを設定して
  対処することが可能である。（または、適当なパラメータを多数試して、その結果で設定）
ｑｓ９  多くの場合、比較回数・移動回数が最小となる。要素サイズが１８０byte以下なら最速。
ｑｓ10  要素サイズ>=400 のときは、自動的にｑｓ９＋間接ソートになる。
        ただし、「インデックス配列」と「要素の移動のための領域」が別途必要となる。
ｑｓ15  要素サイズ>=180のとき、キー値の性質を調べるため、適当な64要素(32組)の要素比較を実施する。
        その結果と要素数と要素サイズにより、直接ソート・間接ソートを選択する
ｑｓ16  qs15・直接mps・間接mpsを自動的に選択する。
        



２．３．大域変数パラメータ

_QS_MID1 要素数n<=_QS_MID1(既定値120) では３点処理を行う。
_QS_MID2 要素数n<=_QS_MID2(既定値580) では９点処理を行う。それ以外は２７点処理。
_QS_MID3 要素サイズsize>=_QS_MID3(既定値180) では間接ソートの可能性を調べる。それ以外はqs9を実行。
_QS_MID4 要素サイズsize>=_QS_MID4(既定値360) ではmpsの可能性を調べる。(qs16専用)



３．ベンチマークテストを行うプログラム　main_prog.c

main_prog.c は clock()関数を用いて実行時間を測定する。
簡易版の「ソートの正しさ検査」を行っている。正式な「ソートの正しさ検査」は別に実施している。
main_prog.c は次のパラメータを指定して実行する。

引数１　キー値の種類を指定する 0:定数 -1:昇順 -2:降順 -3:同値なし乱数 1:乱数 d>=2:乱数%d
引数２　配列の要素数
引数３　配列の要素サイズ(byte数)(0→4or8)(4以上かつ4の倍数であること)(qs15,16自体は1byte単位可能)
引数４　ソートの繰り返し回数（繰り返し毎に配列の要素のキー値は異なる）
引数５　_QS_MID1 の値 (-1のときは既定値を使用)
引数６　_QS_MID2 の値 (-1のときは既定値を使用)
引数７　_QS_MID3 の値 (-1のときは既定値を使用)
引数８　比較関数の重さを調整する数値。大きいほど比較関数が重たくなる。  

main_prog.c 1回の実行で、実行結果を1行出力する。1行は13項目ある。例と意味を次に示す。

    qs9i5         d=-3         e=10000     s=8       R10000      M300:300:8:0:
　プログラム名  キー値の種類  要素の個数  大きさ   繰り返し回数　引数５～８の値

    c=130260    1302608733    a=65855     658555016    i=196115   T=19.06   191  
　平均比較回数  全比較回数  平均代入回数  全代入回数  比較＋代入  処理秒数  平均処理時間(10μ秒単位)

これをstdoutに出力する。（前半の６つと最後の２つはstderrにも出力する）
「 平均代入回数  全代入回数  比較＋代入 」の3項目は、全代入回数>0 のときだけ出力する。

